// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package sqlc

import (
	"context"
	"time"
)

const createTodoTask = `-- name: CreateTodoTask :exec


INSERT INTO todos (id, status)
VALUES (?,
        ?)
`

type CreateTodoTaskParams struct {
	ID     string
	Status TodosStatus
}

// Todoタスクを管理するためのSQLクエリ
// Todoタスクを作成
func (q *Queries) CreateTodoTask(ctx context.Context, arg CreateTodoTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTodoTask, arg.ID, arg.Status)
	return err
}

const deleteTodoTask = `-- name: DeleteTodoTask :exec

DELETE
FROM tasks
WHERE id = ?
`

// Todoタスクを削除（外部キー制約により、todosも自動削除される）
func (q *Queries) DeleteTodoTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodoTask, id)
	return err
}

const getTodoTask = `-- name: GetTodoTask :one

SELECT t.id,
       t.title,
       t.description,
       t.created_at,
       t.updated_at,
       td.status
FROM tasks t
INNER JOIN todos td ON t.id = td.id
WHERE t.id = ?
`

type GetTodoTaskRow struct {
	ID          string
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Status      TodosStatus
}

// Todoタスクを取得（tasksとtodosをJOINして取得）
func (q *Queries) GetTodoTask(ctx context.Context, id string) (GetTodoTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getTodoTask, id)
	var i GetTodoTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const listTodoTasks = `-- name: ListTodoTasks :many

SELECT t.id,
       t.title,
       t.description,
       t.created_at,
       t.updated_at,
       td.status
FROM tasks t
INNER JOIN todos td ON t.id = td.id
ORDER BY t.created_at DESC
`

type ListTodoTasksRow struct {
	ID          string
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Status      TodosStatus
}

// 全てのTodoタスクを取得
func (q *Queries) ListTodoTasks(ctx context.Context) ([]ListTodoTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listTodoTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodoTasksRow
	for rows.Next() {
		var i ListTodoTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoStatus = `-- name: UpdateTodoStatus :exec

UPDATE todos
SET status = ?
WHERE id = ?
`

type UpdateTodoStatusParams struct {
	Status TodosStatus
	ID     string
}

// Todoのステータスを更新
func (q *Queries) UpdateTodoStatus(ctx context.Context, arg UpdateTodoStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTodoStatus, arg.Status, arg.ID)
	return err
}
