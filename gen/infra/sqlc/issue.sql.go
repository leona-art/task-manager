// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: issue.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createIssueTask = `-- name: CreateIssueTask :exec

INSERT INTO issues (id, status, solution, cause)
VALUES (?,
        ?,
        ?,
        ?)
`

type CreateIssueTaskParams struct {
	ID       string
	Status   IssuesStatus
	Solution sql.NullString
	Cause    sql.NullString
}

func (q *Queries) CreateIssueTask(ctx context.Context, arg CreateIssueTaskParams) error {
	_, err := q.db.ExecContext(ctx, createIssueTask,
		arg.ID,
		arg.Status,
		arg.Solution,
		arg.Cause,
	)
	return err
}

const deleteIssueTask = `-- name: DeleteIssueTask :exec

DELETE
FROM tasks
WHERE id = ?
`

// Issueタスクを削除（外部キー制約により、issuesも自動削除される）
func (q *Queries) DeleteIssueTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteIssueTask, id)
	return err
}

const getIssueTask = `-- name: GetIssueTask :one

SELECT t.id,
       t.title,
       t.description,
       t.created_at,
       t.updated_at,
       i.status,
       i.solution,
       i.cause
FROM tasks t
INNER JOIN issues i ON t.id = i.id
WHERE t.id = ?
`

type GetIssueTaskRow struct {
	ID          string
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Status      IssuesStatus
	Solution    sql.NullString
	Cause       sql.NullString
}

// Issueタスクを取得（tasksとissuesをJOINして取得）
func (q *Queries) GetIssueTask(ctx context.Context, id string) (GetIssueTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getIssueTask, id)
	var i GetIssueTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Solution,
		&i.Cause,
	)
	return i, err
}

const listIssueTasks = `-- name: ListIssueTasks :many

SELECT t.id,
       t.title,
       t.description,
       t.created_at,
       t.updated_at,
       i.status,
       i.solution,
       i.cause
FROM tasks t
INNER JOIN issues i ON t.id = i.id
ORDER BY t.created_at DESC
`

type ListIssueTasksRow struct {
	ID          string
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Status      IssuesStatus
	Solution    sql.NullString
	Cause       sql.NullString
}

// 全てのIssueタスクを取得
func (q *Queries) ListIssueTasks(ctx context.Context) ([]ListIssueTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listIssueTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIssueTasksRow
	for rows.Next() {
		var i ListIssueTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Solution,
			&i.Cause,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIssueStatus = `-- name: UpdateIssueStatus :exec

UPDATE issues
SET status = ?,
    solution = ?,
    cause = ?
WHERE id = ?
`

type UpdateIssueStatusParams struct {
	Status   IssuesStatus
	Solution sql.NullString
	Cause    sql.NullString
	ID       string
}

// Issueを更新
func (q *Queries) UpdateIssueStatus(ctx context.Context, arg UpdateIssueStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateIssueStatus,
		arg.Status,
		arg.Solution,
		arg.Cause,
		arg.ID,
	)
	return err
}
