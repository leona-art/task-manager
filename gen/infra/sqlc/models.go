// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type IssuesStatus string

const (
	IssuesStatusOpen          IssuesStatus = "open"
	IssuesStatusInvestigating IssuesStatus = "investigating"
	IssuesStatusResolving     IssuesStatus = "resolving"
	IssuesStatusClosed        IssuesStatus = "closed"
)

func (e *IssuesStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IssuesStatus(s)
	case string:
		*e = IssuesStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IssuesStatus: %T", src)
	}
	return nil
}

type NullIssuesStatus struct {
	IssuesStatus IssuesStatus
	Valid        bool // Valid is true if IssuesStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIssuesStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IssuesStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IssuesStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIssuesStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IssuesStatus), nil
}

type ProgressStatus string

const (
	ProgressStatusNotstarted ProgressStatus = "not started"
	ProgressStatusInprogress ProgressStatus = "in progress"
	ProgressStatusCompleted  ProgressStatus = "completed"
)

func (e *ProgressStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProgressStatus(s)
	case string:
		*e = ProgressStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ProgressStatus: %T", src)
	}
	return nil
}

type NullProgressStatus struct {
	ProgressStatus ProgressStatus
	Valid          bool // Valid is true if ProgressStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProgressStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ProgressStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProgressStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProgressStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProgressStatus), nil
}

type TasksKind string

const (
	TasksKindTodo     TasksKind = "todo"
	TasksKindProgress TasksKind = "progress"
	TasksKindIssue    TasksKind = "issue"
)

func (e *TasksKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TasksKind(s)
	case string:
		*e = TasksKind(s)
	default:
		return fmt.Errorf("unsupported scan type for TasksKind: %T", src)
	}
	return nil
}

type NullTasksKind struct {
	TasksKind TasksKind
	Valid     bool // Valid is true if TasksKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTasksKind) Scan(value interface{}) error {
	if value == nil {
		ns.TasksKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TasksKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTasksKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TasksKind), nil
}

type TodosStatus string

const (
	TodosStatusPending TodosStatus = "pending"
	TodosStatusDone    TodosStatus = "done"
)

func (e *TodosStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TodosStatus(s)
	case string:
		*e = TodosStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TodosStatus: %T", src)
	}
	return nil
}

type NullTodosStatus struct {
	TodosStatus TodosStatus
	Valid       bool // Valid is true if TodosStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTodosStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TodosStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TodosStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTodosStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TodosStatus), nil
}

type Issue struct {
	ID       string
	Status   IssuesStatus
	Solution sql.NullString
	Cause    sql.NullString
}

type Progress struct {
	ID       string
	Status   ProgressStatus
	Solution sql.NullString
}

type Task struct {
	ID          string
	Title       string
	Description string
	Kind        TasksKind
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Todo struct {
	ID     string
	Status TodosStatus
}
