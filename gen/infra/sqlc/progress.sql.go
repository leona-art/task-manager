// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: progress.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createProgressTask = `-- name: CreateProgressTask :exec

INSERT INTO progress (id, status, solution)
VALUES (?,
        ?,
        ?)
`

type CreateProgressTaskParams struct {
	ID       string
	Status   ProgressStatus
	Solution sql.NullString
}

func (q *Queries) CreateProgressTask(ctx context.Context, arg CreateProgressTaskParams) error {
	_, err := q.db.ExecContext(ctx, createProgressTask, arg.ID, arg.Status, arg.Solution)
	return err
}

const deleteProgressTask = `-- name: DeleteProgressTask :exec

DELETE
FROM tasks
WHERE id = ?
`

// Progressタスクを削除（外部キー制約により、progressも自動削除される）
func (q *Queries) DeleteProgressTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProgressTask, id)
	return err
}

const getProgressTask = `-- name: GetProgressTask :one

SELECT t.id,
       t.title,
       t.description,
       t.created_at,
       t.updated_at,
       p.status,
       p.solution
FROM tasks t
INNER JOIN progress p ON t.id = p.id
WHERE t.id = ?
`

type GetProgressTaskRow struct {
	ID          string
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Status      ProgressStatus
	Solution    sql.NullString
}

// Progressタスクを取得（tasksとprogressをJOINして取得）
func (q *Queries) GetProgressTask(ctx context.Context, id string) (GetProgressTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getProgressTask, id)
	var i GetProgressTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Solution,
	)
	return i, err
}

const listProgressTasks = `-- name: ListProgressTasks :many

SELECT t.id,
       t.title,
       t.description,
       t.created_at,
       t.updated_at,
       p.status,
       p.solution
FROM tasks t
INNER JOIN progress p ON t.id = p.id
ORDER BY t.created_at DESC
`

type ListProgressTasksRow struct {
	ID          string
	Title       string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Status      ProgressStatus
	Solution    sql.NullString
}

// 全てのProgressタスクを取得
func (q *Queries) ListProgressTasks(ctx context.Context) ([]ListProgressTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listProgressTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProgressTasksRow
	for rows.Next() {
		var i ListProgressTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Solution,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProgressStatus = `-- name: UpdateProgressStatus :exec

UPDATE progress
SET status = ?,
    solution = ?
WHERE id = ?
`

type UpdateProgressStatusParams struct {
	Status   ProgressStatus
	Solution sql.NullString
	ID       string
}

// Progressを更新
func (q *Queries) UpdateProgressStatus(ctx context.Context, arg UpdateProgressStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateProgressStatus, arg.Status, arg.Solution, arg.ID)
	return err
}
