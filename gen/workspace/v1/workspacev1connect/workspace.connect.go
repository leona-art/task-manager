// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workspace/v1/workspace.proto

package workspacev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/leona-art/task-manager/gen/workspace/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "workspace.v1.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceCreateTodoProcedure is the fully-qualified name of the WorkspaceService's
	// CreateTodo RPC.
	WorkspaceServiceCreateTodoProcedure = "/workspace.v1.WorkspaceService/CreateTodo"
	// WorkspaceServiceGetTodoProcedure is the fully-qualified name of the WorkspaceService's GetTodo
	// RPC.
	WorkspaceServiceGetTodoProcedure = "/workspace.v1.WorkspaceService/GetTodo"
	// WorkspaceServiceListTodosProcedure is the fully-qualified name of the WorkspaceService's
	// ListTodos RPC.
	WorkspaceServiceListTodosProcedure = "/workspace.v1.WorkspaceService/ListTodos"
	// WorkspaceServiceDoTodoProcedure is the fully-qualified name of the WorkspaceService's DoTodo RPC.
	WorkspaceServiceDoTodoProcedure = "/workspace.v1.WorkspaceService/DoTodo"
	// WorkspaceServiceUndoneTodoProcedure is the fully-qualified name of the WorkspaceService's
	// UndoneTodo RPC.
	WorkspaceServiceUndoneTodoProcedure = "/workspace.v1.WorkspaceService/UndoneTodo"
)

// WorkspaceServiceClient is a client for the workspace.v1.WorkspaceService service.
type WorkspaceServiceClient interface {
	CreateTodo(context.Context, *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error)
	GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error)
	ListTodos(context.Context, *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error)
	DoTodo(context.Context, *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error)
	UndoneTodo(context.Context, *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error)
}

// NewWorkspaceServiceClient constructs a client for the workspace.v1.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workspaceServiceMethods := v1.File_workspace_v1_workspace_proto.Services().ByName("WorkspaceService").Methods()
	return &workspaceServiceClient{
		createTodo: connect.NewClient[v1.CreateTodoRequest, v1.CreateTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CreateTodo")),
			connect.WithClientOptions(opts...),
		),
		getTodo: connect.NewClient[v1.GetTodoRequest, v1.GetTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceGetTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetTodo")),
			connect.WithClientOptions(opts...),
		),
		listTodos: connect.NewClient[v1.ListTodosRequest, v1.ListTodosResponse](
			httpClient,
			baseURL+WorkspaceServiceListTodosProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("ListTodos")),
			connect.WithClientOptions(opts...),
		),
		doTodo: connect.NewClient[v1.DoTodoRequest, v1.DoTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceDoTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("DoTodo")),
			connect.WithClientOptions(opts...),
		),
		undoneTodo: connect.NewClient[v1.UndoneTodoRequest, v1.UndoneTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceUndoneTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("UndoneTodo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	createTodo *connect.Client[v1.CreateTodoRequest, v1.CreateTodoResponse]
	getTodo    *connect.Client[v1.GetTodoRequest, v1.GetTodoResponse]
	listTodos  *connect.Client[v1.ListTodosRequest, v1.ListTodosResponse]
	doTodo     *connect.Client[v1.DoTodoRequest, v1.DoTodoResponse]
	undoneTodo *connect.Client[v1.UndoneTodoRequest, v1.UndoneTodoResponse]
}

// CreateTodo calls workspace.v1.WorkspaceService.CreateTodo.
func (c *workspaceServiceClient) CreateTodo(ctx context.Context, req *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error) {
	return c.createTodo.CallUnary(ctx, req)
}

// GetTodo calls workspace.v1.WorkspaceService.GetTodo.
func (c *workspaceServiceClient) GetTodo(ctx context.Context, req *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error) {
	return c.getTodo.CallUnary(ctx, req)
}

// ListTodos calls workspace.v1.WorkspaceService.ListTodos.
func (c *workspaceServiceClient) ListTodos(ctx context.Context, req *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error) {
	return c.listTodos.CallUnary(ctx, req)
}

// DoTodo calls workspace.v1.WorkspaceService.DoTodo.
func (c *workspaceServiceClient) DoTodo(ctx context.Context, req *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error) {
	return c.doTodo.CallUnary(ctx, req)
}

// UndoneTodo calls workspace.v1.WorkspaceService.UndoneTodo.
func (c *workspaceServiceClient) UndoneTodo(ctx context.Context, req *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error) {
	return c.undoneTodo.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the workspace.v1.WorkspaceService service.
type WorkspaceServiceHandler interface {
	CreateTodo(context.Context, *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error)
	GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error)
	ListTodos(context.Context, *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error)
	DoTodo(context.Context, *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error)
	UndoneTodo(context.Context, *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workspaceServiceMethods := v1.File_workspace_v1_workspace_proto.Services().ByName("WorkspaceService").Methods()
	workspaceServiceCreateTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateTodoProcedure,
		svc.CreateTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("CreateTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetTodoProcedure,
		svc.GetTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("GetTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceListTodosHandler := connect.NewUnaryHandler(
		WorkspaceServiceListTodosProcedure,
		svc.ListTodos,
		connect.WithSchema(workspaceServiceMethods.ByName("ListTodos")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDoTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceDoTodoProcedure,
		svc.DoTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("DoTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceUndoneTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceUndoneTodoProcedure,
		svc.UndoneTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("UndoneTodo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workspace.v1.WorkspaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkspaceServiceCreateTodoProcedure:
			workspaceServiceCreateTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetTodoProcedure:
			workspaceServiceGetTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceListTodosProcedure:
			workspaceServiceListTodosHandler.ServeHTTP(w, r)
		case WorkspaceServiceDoTodoProcedure:
			workspaceServiceDoTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceUndoneTodoProcedure:
			workspaceServiceUndoneTodoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) CreateTodo(context.Context, *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CreateTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListTodos(context.Context, *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ListTodos is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DoTodo(context.Context, *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DoTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UndoneTodo(context.Context, *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.UndoneTodo is not implemented"))
}
