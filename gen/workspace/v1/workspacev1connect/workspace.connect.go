// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workspace/v1/workspace.proto

package workspacev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/leona-art/task-manager/gen/workspace/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "workspace.v1.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceCreateTaskProcedure is the fully-qualified name of the WorkspaceService's
	// CreateTask RPC.
	WorkspaceServiceCreateTaskProcedure = "/workspace.v1.WorkspaceService/CreateTask"
	// WorkspaceServiceGetTaskProcedure is the fully-qualified name of the WorkspaceService's GetTask
	// RPC.
	WorkspaceServiceGetTaskProcedure = "/workspace.v1.WorkspaceService/GetTask"
	// WorkspaceServiceListTasksProcedure is the fully-qualified name of the WorkspaceService's
	// ListTasks RPC.
	WorkspaceServiceListTasksProcedure = "/workspace.v1.WorkspaceService/ListTasks"
	// WorkspaceServiceDeleteTaskProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteTask RPC.
	WorkspaceServiceDeleteTaskProcedure = "/workspace.v1.WorkspaceService/DeleteTask"
	// WorkspaceServiceCreateTodoProcedure is the fully-qualified name of the WorkspaceService's
	// CreateTodo RPC.
	WorkspaceServiceCreateTodoProcedure = "/workspace.v1.WorkspaceService/CreateTodo"
	// WorkspaceServiceGetTodoProcedure is the fully-qualified name of the WorkspaceService's GetTodo
	// RPC.
	WorkspaceServiceGetTodoProcedure = "/workspace.v1.WorkspaceService/GetTodo"
	// WorkspaceServiceListTodosProcedure is the fully-qualified name of the WorkspaceService's
	// ListTodos RPC.
	WorkspaceServiceListTodosProcedure = "/workspace.v1.WorkspaceService/ListTodos"
	// WorkspaceServiceDoTodoProcedure is the fully-qualified name of the WorkspaceService's DoTodo RPC.
	WorkspaceServiceDoTodoProcedure = "/workspace.v1.WorkspaceService/DoTodo"
	// WorkspaceServiceUndoneTodoProcedure is the fully-qualified name of the WorkspaceService's
	// UndoneTodo RPC.
	WorkspaceServiceUndoneTodoProcedure = "/workspace.v1.WorkspaceService/UndoneTodo"
	// WorkspaceServiceDeleteTodoProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteTodo RPC.
	WorkspaceServiceDeleteTodoProcedure = "/workspace.v1.WorkspaceService/DeleteTodo"
	// WorkspaceServiceCreateProgressProcedure is the fully-qualified name of the WorkspaceService's
	// CreateProgress RPC.
	WorkspaceServiceCreateProgressProcedure = "/workspace.v1.WorkspaceService/CreateProgress"
	// WorkspaceServiceGetProgressProcedure is the fully-qualified name of the WorkspaceService's
	// GetProgress RPC.
	WorkspaceServiceGetProgressProcedure = "/workspace.v1.WorkspaceService/GetProgress"
	// WorkspaceServiceListProgressesProcedure is the fully-qualified name of the WorkspaceService's
	// ListProgresses RPC.
	WorkspaceServiceListProgressesProcedure = "/workspace.v1.WorkspaceService/ListProgresses"
	// WorkspaceServiceSetProgressSolutionProcedure is the fully-qualified name of the
	// WorkspaceService's SetProgressSolution RPC.
	WorkspaceServiceSetProgressSolutionProcedure = "/workspace.v1.WorkspaceService/SetProgressSolution"
	// WorkspaceServiceStartProgressProcedure is the fully-qualified name of the WorkspaceService's
	// StartProgress RPC.
	WorkspaceServiceStartProgressProcedure = "/workspace.v1.WorkspaceService/StartProgress"
	// WorkspaceServiceCompleteProgressProcedure is the fully-qualified name of the WorkspaceService's
	// CompleteProgress RPC.
	WorkspaceServiceCompleteProgressProcedure = "/workspace.v1.WorkspaceService/CompleteProgress"
	// WorkspaceServiceDeleteProgressProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteProgress RPC.
	WorkspaceServiceDeleteProgressProcedure = "/workspace.v1.WorkspaceService/DeleteProgress"
	// WorkspaceServiceCreateIssueProcedure is the fully-qualified name of the WorkspaceService's
	// CreateIssue RPC.
	WorkspaceServiceCreateIssueProcedure = "/workspace.v1.WorkspaceService/CreateIssue"
	// WorkspaceServiceGetIssueProcedure is the fully-qualified name of the WorkspaceService's GetIssue
	// RPC.
	WorkspaceServiceGetIssueProcedure = "/workspace.v1.WorkspaceService/GetIssue"
	// WorkspaceServiceListIssuesProcedure is the fully-qualified name of the WorkspaceService's
	// ListIssues RPC.
	WorkspaceServiceListIssuesProcedure = "/workspace.v1.WorkspaceService/ListIssues"
	// WorkspaceServiceInvestigateIssueProcedure is the fully-qualified name of the WorkspaceService's
	// InvestigateIssue RPC.
	WorkspaceServiceInvestigateIssueProcedure = "/workspace.v1.WorkspaceService/InvestigateIssue"
	// WorkspaceServiceResolveIssueProcedure is the fully-qualified name of the WorkspaceService's
	// ResolveIssue RPC.
	WorkspaceServiceResolveIssueProcedure = "/workspace.v1.WorkspaceService/ResolveIssue"
	// WorkspaceServiceCloseIssueProcedure is the fully-qualified name of the WorkspaceService's
	// CloseIssue RPC.
	WorkspaceServiceCloseIssueProcedure = "/workspace.v1.WorkspaceService/CloseIssue"
	// WorkspaceServiceDeleteIssueProcedure is the fully-qualified name of the WorkspaceService's
	// DeleteIssue RPC.
	WorkspaceServiceDeleteIssueProcedure = "/workspace.v1.WorkspaceService/DeleteIssue"
)

// WorkspaceServiceClient is a client for the workspace.v1.WorkspaceService service.
type WorkspaceServiceClient interface {
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	CreateTodo(context.Context, *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error)
	GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error)
	ListTodos(context.Context, *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error)
	DoTodo(context.Context, *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error)
	UndoneTodo(context.Context, *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error)
	DeleteTodo(context.Context, *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error)
	CreateProgress(context.Context, *connect.Request[v1.CreateProgressRequest]) (*connect.Response[v1.CreateProgressResponse], error)
	GetProgress(context.Context, *connect.Request[v1.GetProgressRequest]) (*connect.Response[v1.GetProgressResponse], error)
	ListProgresses(context.Context, *connect.Request[v1.ListProgressesRequest]) (*connect.Response[v1.ListProgressesResponse], error)
	SetProgressSolution(context.Context, *connect.Request[v1.SetProgressSolutionRequest]) (*connect.Response[v1.SetProgressSolutionResponse], error)
	StartProgress(context.Context, *connect.Request[v1.StartProgressRequest]) (*connect.Response[v1.StartProgressResponse], error)
	CompleteProgress(context.Context, *connect.Request[v1.CompleteProgressRequest]) (*connect.Response[v1.CompleteProgressResponse], error)
	DeleteProgress(context.Context, *connect.Request[v1.DeleteProgressRequest]) (*connect.Response[v1.DeleteProgressResponse], error)
	CreateIssue(context.Context, *connect.Request[v1.CreateIssueRequest]) (*connect.Response[v1.CreateIssueResponse], error)
	GetIssue(context.Context, *connect.Request[v1.GetIssueRequest]) (*connect.Response[v1.GetIssueResponse], error)
	ListIssues(context.Context, *connect.Request[v1.ListIssuesRequest]) (*connect.Response[v1.ListIssuesResponse], error)
	InvestigateIssue(context.Context, *connect.Request[v1.InvestigateIssueRequest]) (*connect.Response[v1.InvestigateIssueResponse], error)
	ResolveIssue(context.Context, *connect.Request[v1.ResolveIssueRequest]) (*connect.Response[v1.ResolveIssueResponse], error)
	CloseIssue(context.Context, *connect.Request[v1.CloseIssueRequest]) (*connect.Response[v1.CloseIssueResponse], error)
	DeleteIssue(context.Context, *connect.Request[v1.DeleteIssueRequest]) (*connect.Response[v1.DeleteIssueResponse], error)
}

// NewWorkspaceServiceClient constructs a client for the workspace.v1.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workspaceServiceMethods := v1.File_workspace_v1_workspace_proto.Services().ByName("WorkspaceService").Methods()
	return &workspaceServiceClient{
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateTaskProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+WorkspaceServiceGetTaskProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+WorkspaceServiceListTasksProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("ListTasks")),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteTaskProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("DeleteTask")),
			connect.WithClientOptions(opts...),
		),
		createTodo: connect.NewClient[v1.CreateTodoRequest, v1.CreateTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CreateTodo")),
			connect.WithClientOptions(opts...),
		),
		getTodo: connect.NewClient[v1.GetTodoRequest, v1.GetTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceGetTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetTodo")),
			connect.WithClientOptions(opts...),
		),
		listTodos: connect.NewClient[v1.ListTodosRequest, v1.ListTodosResponse](
			httpClient,
			baseURL+WorkspaceServiceListTodosProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("ListTodos")),
			connect.WithClientOptions(opts...),
		),
		doTodo: connect.NewClient[v1.DoTodoRequest, v1.DoTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceDoTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("DoTodo")),
			connect.WithClientOptions(opts...),
		),
		undoneTodo: connect.NewClient[v1.UndoneTodoRequest, v1.UndoneTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceUndoneTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("UndoneTodo")),
			connect.WithClientOptions(opts...),
		),
		deleteTodo: connect.NewClient[v1.DeleteTodoRequest, v1.DeleteTodoResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteTodoProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("DeleteTodo")),
			connect.WithClientOptions(opts...),
		),
		createProgress: connect.NewClient[v1.CreateProgressRequest, v1.CreateProgressResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateProgressProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CreateProgress")),
			connect.WithClientOptions(opts...),
		),
		getProgress: connect.NewClient[v1.GetProgressRequest, v1.GetProgressResponse](
			httpClient,
			baseURL+WorkspaceServiceGetProgressProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetProgress")),
			connect.WithClientOptions(opts...),
		),
		listProgresses: connect.NewClient[v1.ListProgressesRequest, v1.ListProgressesResponse](
			httpClient,
			baseURL+WorkspaceServiceListProgressesProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("ListProgresses")),
			connect.WithClientOptions(opts...),
		),
		setProgressSolution: connect.NewClient[v1.SetProgressSolutionRequest, v1.SetProgressSolutionResponse](
			httpClient,
			baseURL+WorkspaceServiceSetProgressSolutionProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("SetProgressSolution")),
			connect.WithClientOptions(opts...),
		),
		startProgress: connect.NewClient[v1.StartProgressRequest, v1.StartProgressResponse](
			httpClient,
			baseURL+WorkspaceServiceStartProgressProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("StartProgress")),
			connect.WithClientOptions(opts...),
		),
		completeProgress: connect.NewClient[v1.CompleteProgressRequest, v1.CompleteProgressResponse](
			httpClient,
			baseURL+WorkspaceServiceCompleteProgressProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CompleteProgress")),
			connect.WithClientOptions(opts...),
		),
		deleteProgress: connect.NewClient[v1.DeleteProgressRequest, v1.DeleteProgressResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteProgressProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("DeleteProgress")),
			connect.WithClientOptions(opts...),
		),
		createIssue: connect.NewClient[v1.CreateIssueRequest, v1.CreateIssueResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateIssueProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CreateIssue")),
			connect.WithClientOptions(opts...),
		),
		getIssue: connect.NewClient[v1.GetIssueRequest, v1.GetIssueResponse](
			httpClient,
			baseURL+WorkspaceServiceGetIssueProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetIssue")),
			connect.WithClientOptions(opts...),
		),
		listIssues: connect.NewClient[v1.ListIssuesRequest, v1.ListIssuesResponse](
			httpClient,
			baseURL+WorkspaceServiceListIssuesProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("ListIssues")),
			connect.WithClientOptions(opts...),
		),
		investigateIssue: connect.NewClient[v1.InvestigateIssueRequest, v1.InvestigateIssueResponse](
			httpClient,
			baseURL+WorkspaceServiceInvestigateIssueProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("InvestigateIssue")),
			connect.WithClientOptions(opts...),
		),
		resolveIssue: connect.NewClient[v1.ResolveIssueRequest, v1.ResolveIssueResponse](
			httpClient,
			baseURL+WorkspaceServiceResolveIssueProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("ResolveIssue")),
			connect.WithClientOptions(opts...),
		),
		closeIssue: connect.NewClient[v1.CloseIssueRequest, v1.CloseIssueResponse](
			httpClient,
			baseURL+WorkspaceServiceCloseIssueProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("CloseIssue")),
			connect.WithClientOptions(opts...),
		),
		deleteIssue: connect.NewClient[v1.DeleteIssueRequest, v1.DeleteIssueResponse](
			httpClient,
			baseURL+WorkspaceServiceDeleteIssueProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("DeleteIssue")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	createTask          *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	getTask             *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	listTasks           *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	deleteTask          *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	createTodo          *connect.Client[v1.CreateTodoRequest, v1.CreateTodoResponse]
	getTodo             *connect.Client[v1.GetTodoRequest, v1.GetTodoResponse]
	listTodos           *connect.Client[v1.ListTodosRequest, v1.ListTodosResponse]
	doTodo              *connect.Client[v1.DoTodoRequest, v1.DoTodoResponse]
	undoneTodo          *connect.Client[v1.UndoneTodoRequest, v1.UndoneTodoResponse]
	deleteTodo          *connect.Client[v1.DeleteTodoRequest, v1.DeleteTodoResponse]
	createProgress      *connect.Client[v1.CreateProgressRequest, v1.CreateProgressResponse]
	getProgress         *connect.Client[v1.GetProgressRequest, v1.GetProgressResponse]
	listProgresses      *connect.Client[v1.ListProgressesRequest, v1.ListProgressesResponse]
	setProgressSolution *connect.Client[v1.SetProgressSolutionRequest, v1.SetProgressSolutionResponse]
	startProgress       *connect.Client[v1.StartProgressRequest, v1.StartProgressResponse]
	completeProgress    *connect.Client[v1.CompleteProgressRequest, v1.CompleteProgressResponse]
	deleteProgress      *connect.Client[v1.DeleteProgressRequest, v1.DeleteProgressResponse]
	createIssue         *connect.Client[v1.CreateIssueRequest, v1.CreateIssueResponse]
	getIssue            *connect.Client[v1.GetIssueRequest, v1.GetIssueResponse]
	listIssues          *connect.Client[v1.ListIssuesRequest, v1.ListIssuesResponse]
	investigateIssue    *connect.Client[v1.InvestigateIssueRequest, v1.InvestigateIssueResponse]
	resolveIssue        *connect.Client[v1.ResolveIssueRequest, v1.ResolveIssueResponse]
	closeIssue          *connect.Client[v1.CloseIssueRequest, v1.CloseIssueResponse]
	deleteIssue         *connect.Client[v1.DeleteIssueRequest, v1.DeleteIssueResponse]
}

// CreateTask calls workspace.v1.WorkspaceService.CreateTask.
func (c *workspaceServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls workspace.v1.WorkspaceService.GetTask.
func (c *workspaceServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTasks calls workspace.v1.WorkspaceService.ListTasks.
func (c *workspaceServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// DeleteTask calls workspace.v1.WorkspaceService.DeleteTask.
func (c *workspaceServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// CreateTodo calls workspace.v1.WorkspaceService.CreateTodo.
func (c *workspaceServiceClient) CreateTodo(ctx context.Context, req *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error) {
	return c.createTodo.CallUnary(ctx, req)
}

// GetTodo calls workspace.v1.WorkspaceService.GetTodo.
func (c *workspaceServiceClient) GetTodo(ctx context.Context, req *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error) {
	return c.getTodo.CallUnary(ctx, req)
}

// ListTodos calls workspace.v1.WorkspaceService.ListTodos.
func (c *workspaceServiceClient) ListTodos(ctx context.Context, req *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error) {
	return c.listTodos.CallUnary(ctx, req)
}

// DoTodo calls workspace.v1.WorkspaceService.DoTodo.
func (c *workspaceServiceClient) DoTodo(ctx context.Context, req *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error) {
	return c.doTodo.CallUnary(ctx, req)
}

// UndoneTodo calls workspace.v1.WorkspaceService.UndoneTodo.
func (c *workspaceServiceClient) UndoneTodo(ctx context.Context, req *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error) {
	return c.undoneTodo.CallUnary(ctx, req)
}

// DeleteTodo calls workspace.v1.WorkspaceService.DeleteTodo.
func (c *workspaceServiceClient) DeleteTodo(ctx context.Context, req *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error) {
	return c.deleteTodo.CallUnary(ctx, req)
}

// CreateProgress calls workspace.v1.WorkspaceService.CreateProgress.
func (c *workspaceServiceClient) CreateProgress(ctx context.Context, req *connect.Request[v1.CreateProgressRequest]) (*connect.Response[v1.CreateProgressResponse], error) {
	return c.createProgress.CallUnary(ctx, req)
}

// GetProgress calls workspace.v1.WorkspaceService.GetProgress.
func (c *workspaceServiceClient) GetProgress(ctx context.Context, req *connect.Request[v1.GetProgressRequest]) (*connect.Response[v1.GetProgressResponse], error) {
	return c.getProgress.CallUnary(ctx, req)
}

// ListProgresses calls workspace.v1.WorkspaceService.ListProgresses.
func (c *workspaceServiceClient) ListProgresses(ctx context.Context, req *connect.Request[v1.ListProgressesRequest]) (*connect.Response[v1.ListProgressesResponse], error) {
	return c.listProgresses.CallUnary(ctx, req)
}

// SetProgressSolution calls workspace.v1.WorkspaceService.SetProgressSolution.
func (c *workspaceServiceClient) SetProgressSolution(ctx context.Context, req *connect.Request[v1.SetProgressSolutionRequest]) (*connect.Response[v1.SetProgressSolutionResponse], error) {
	return c.setProgressSolution.CallUnary(ctx, req)
}

// StartProgress calls workspace.v1.WorkspaceService.StartProgress.
func (c *workspaceServiceClient) StartProgress(ctx context.Context, req *connect.Request[v1.StartProgressRequest]) (*connect.Response[v1.StartProgressResponse], error) {
	return c.startProgress.CallUnary(ctx, req)
}

// CompleteProgress calls workspace.v1.WorkspaceService.CompleteProgress.
func (c *workspaceServiceClient) CompleteProgress(ctx context.Context, req *connect.Request[v1.CompleteProgressRequest]) (*connect.Response[v1.CompleteProgressResponse], error) {
	return c.completeProgress.CallUnary(ctx, req)
}

// DeleteProgress calls workspace.v1.WorkspaceService.DeleteProgress.
func (c *workspaceServiceClient) DeleteProgress(ctx context.Context, req *connect.Request[v1.DeleteProgressRequest]) (*connect.Response[v1.DeleteProgressResponse], error) {
	return c.deleteProgress.CallUnary(ctx, req)
}

// CreateIssue calls workspace.v1.WorkspaceService.CreateIssue.
func (c *workspaceServiceClient) CreateIssue(ctx context.Context, req *connect.Request[v1.CreateIssueRequest]) (*connect.Response[v1.CreateIssueResponse], error) {
	return c.createIssue.CallUnary(ctx, req)
}

// GetIssue calls workspace.v1.WorkspaceService.GetIssue.
func (c *workspaceServiceClient) GetIssue(ctx context.Context, req *connect.Request[v1.GetIssueRequest]) (*connect.Response[v1.GetIssueResponse], error) {
	return c.getIssue.CallUnary(ctx, req)
}

// ListIssues calls workspace.v1.WorkspaceService.ListIssues.
func (c *workspaceServiceClient) ListIssues(ctx context.Context, req *connect.Request[v1.ListIssuesRequest]) (*connect.Response[v1.ListIssuesResponse], error) {
	return c.listIssues.CallUnary(ctx, req)
}

// InvestigateIssue calls workspace.v1.WorkspaceService.InvestigateIssue.
func (c *workspaceServiceClient) InvestigateIssue(ctx context.Context, req *connect.Request[v1.InvestigateIssueRequest]) (*connect.Response[v1.InvestigateIssueResponse], error) {
	return c.investigateIssue.CallUnary(ctx, req)
}

// ResolveIssue calls workspace.v1.WorkspaceService.ResolveIssue.
func (c *workspaceServiceClient) ResolveIssue(ctx context.Context, req *connect.Request[v1.ResolveIssueRequest]) (*connect.Response[v1.ResolveIssueResponse], error) {
	return c.resolveIssue.CallUnary(ctx, req)
}

// CloseIssue calls workspace.v1.WorkspaceService.CloseIssue.
func (c *workspaceServiceClient) CloseIssue(ctx context.Context, req *connect.Request[v1.CloseIssueRequest]) (*connect.Response[v1.CloseIssueResponse], error) {
	return c.closeIssue.CallUnary(ctx, req)
}

// DeleteIssue calls workspace.v1.WorkspaceService.DeleteIssue.
func (c *workspaceServiceClient) DeleteIssue(ctx context.Context, req *connect.Request[v1.DeleteIssueRequest]) (*connect.Response[v1.DeleteIssueResponse], error) {
	return c.deleteIssue.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the workspace.v1.WorkspaceService service.
type WorkspaceServiceHandler interface {
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	CreateTodo(context.Context, *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error)
	GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error)
	ListTodos(context.Context, *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error)
	DoTodo(context.Context, *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error)
	UndoneTodo(context.Context, *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error)
	DeleteTodo(context.Context, *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error)
	CreateProgress(context.Context, *connect.Request[v1.CreateProgressRequest]) (*connect.Response[v1.CreateProgressResponse], error)
	GetProgress(context.Context, *connect.Request[v1.GetProgressRequest]) (*connect.Response[v1.GetProgressResponse], error)
	ListProgresses(context.Context, *connect.Request[v1.ListProgressesRequest]) (*connect.Response[v1.ListProgressesResponse], error)
	SetProgressSolution(context.Context, *connect.Request[v1.SetProgressSolutionRequest]) (*connect.Response[v1.SetProgressSolutionResponse], error)
	StartProgress(context.Context, *connect.Request[v1.StartProgressRequest]) (*connect.Response[v1.StartProgressResponse], error)
	CompleteProgress(context.Context, *connect.Request[v1.CompleteProgressRequest]) (*connect.Response[v1.CompleteProgressResponse], error)
	DeleteProgress(context.Context, *connect.Request[v1.DeleteProgressRequest]) (*connect.Response[v1.DeleteProgressResponse], error)
	CreateIssue(context.Context, *connect.Request[v1.CreateIssueRequest]) (*connect.Response[v1.CreateIssueResponse], error)
	GetIssue(context.Context, *connect.Request[v1.GetIssueRequest]) (*connect.Response[v1.GetIssueResponse], error)
	ListIssues(context.Context, *connect.Request[v1.ListIssuesRequest]) (*connect.Response[v1.ListIssuesResponse], error)
	InvestigateIssue(context.Context, *connect.Request[v1.InvestigateIssueRequest]) (*connect.Response[v1.InvestigateIssueResponse], error)
	ResolveIssue(context.Context, *connect.Request[v1.ResolveIssueRequest]) (*connect.Response[v1.ResolveIssueResponse], error)
	CloseIssue(context.Context, *connect.Request[v1.CloseIssueRequest]) (*connect.Response[v1.CloseIssueResponse], error)
	DeleteIssue(context.Context, *connect.Request[v1.DeleteIssueRequest]) (*connect.Response[v1.DeleteIssueResponse], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workspaceServiceMethods := v1.File_workspace_v1_workspace_proto.Services().ByName("WorkspaceService").Methods()
	workspaceServiceCreateTaskHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(workspaceServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetTaskHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(workspaceServiceMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceListTasksHandler := connect.NewUnaryHandler(
		WorkspaceServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(workspaceServiceMethods.ByName("ListTasks")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDeleteTaskHandler := connect.NewUnaryHandler(
		WorkspaceServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(workspaceServiceMethods.ByName("DeleteTask")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceCreateTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateTodoProcedure,
		svc.CreateTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("CreateTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetTodoProcedure,
		svc.GetTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("GetTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceListTodosHandler := connect.NewUnaryHandler(
		WorkspaceServiceListTodosProcedure,
		svc.ListTodos,
		connect.WithSchema(workspaceServiceMethods.ByName("ListTodos")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDoTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceDoTodoProcedure,
		svc.DoTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("DoTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceUndoneTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceUndoneTodoProcedure,
		svc.UndoneTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("UndoneTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDeleteTodoHandler := connect.NewUnaryHandler(
		WorkspaceServiceDeleteTodoProcedure,
		svc.DeleteTodo,
		connect.WithSchema(workspaceServiceMethods.ByName("DeleteTodo")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceCreateProgressHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateProgressProcedure,
		svc.CreateProgress,
		connect.WithSchema(workspaceServiceMethods.ByName("CreateProgress")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetProgressHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetProgressProcedure,
		svc.GetProgress,
		connect.WithSchema(workspaceServiceMethods.ByName("GetProgress")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceListProgressesHandler := connect.NewUnaryHandler(
		WorkspaceServiceListProgressesProcedure,
		svc.ListProgresses,
		connect.WithSchema(workspaceServiceMethods.ByName("ListProgresses")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceSetProgressSolutionHandler := connect.NewUnaryHandler(
		WorkspaceServiceSetProgressSolutionProcedure,
		svc.SetProgressSolution,
		connect.WithSchema(workspaceServiceMethods.ByName("SetProgressSolution")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceStartProgressHandler := connect.NewUnaryHandler(
		WorkspaceServiceStartProgressProcedure,
		svc.StartProgress,
		connect.WithSchema(workspaceServiceMethods.ByName("StartProgress")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceCompleteProgressHandler := connect.NewUnaryHandler(
		WorkspaceServiceCompleteProgressProcedure,
		svc.CompleteProgress,
		connect.WithSchema(workspaceServiceMethods.ByName("CompleteProgress")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDeleteProgressHandler := connect.NewUnaryHandler(
		WorkspaceServiceDeleteProgressProcedure,
		svc.DeleteProgress,
		connect.WithSchema(workspaceServiceMethods.ByName("DeleteProgress")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceCreateIssueHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateIssueProcedure,
		svc.CreateIssue,
		connect.WithSchema(workspaceServiceMethods.ByName("CreateIssue")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetIssueHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetIssueProcedure,
		svc.GetIssue,
		connect.WithSchema(workspaceServiceMethods.ByName("GetIssue")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceListIssuesHandler := connect.NewUnaryHandler(
		WorkspaceServiceListIssuesProcedure,
		svc.ListIssues,
		connect.WithSchema(workspaceServiceMethods.ByName("ListIssues")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceInvestigateIssueHandler := connect.NewUnaryHandler(
		WorkspaceServiceInvestigateIssueProcedure,
		svc.InvestigateIssue,
		connect.WithSchema(workspaceServiceMethods.ByName("InvestigateIssue")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceResolveIssueHandler := connect.NewUnaryHandler(
		WorkspaceServiceResolveIssueProcedure,
		svc.ResolveIssue,
		connect.WithSchema(workspaceServiceMethods.ByName("ResolveIssue")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceCloseIssueHandler := connect.NewUnaryHandler(
		WorkspaceServiceCloseIssueProcedure,
		svc.CloseIssue,
		connect.WithSchema(workspaceServiceMethods.ByName("CloseIssue")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceDeleteIssueHandler := connect.NewUnaryHandler(
		WorkspaceServiceDeleteIssueProcedure,
		svc.DeleteIssue,
		connect.WithSchema(workspaceServiceMethods.ByName("DeleteIssue")),
		connect.WithHandlerOptions(opts...),
	)
	return "/workspace.v1.WorkspaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkspaceServiceCreateTaskProcedure:
			workspaceServiceCreateTaskHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetTaskProcedure:
			workspaceServiceGetTaskHandler.ServeHTTP(w, r)
		case WorkspaceServiceListTasksProcedure:
			workspaceServiceListTasksHandler.ServeHTTP(w, r)
		case WorkspaceServiceDeleteTaskProcedure:
			workspaceServiceDeleteTaskHandler.ServeHTTP(w, r)
		case WorkspaceServiceCreateTodoProcedure:
			workspaceServiceCreateTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetTodoProcedure:
			workspaceServiceGetTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceListTodosProcedure:
			workspaceServiceListTodosHandler.ServeHTTP(w, r)
		case WorkspaceServiceDoTodoProcedure:
			workspaceServiceDoTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceUndoneTodoProcedure:
			workspaceServiceUndoneTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceDeleteTodoProcedure:
			workspaceServiceDeleteTodoHandler.ServeHTTP(w, r)
		case WorkspaceServiceCreateProgressProcedure:
			workspaceServiceCreateProgressHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetProgressProcedure:
			workspaceServiceGetProgressHandler.ServeHTTP(w, r)
		case WorkspaceServiceListProgressesProcedure:
			workspaceServiceListProgressesHandler.ServeHTTP(w, r)
		case WorkspaceServiceSetProgressSolutionProcedure:
			workspaceServiceSetProgressSolutionHandler.ServeHTTP(w, r)
		case WorkspaceServiceStartProgressProcedure:
			workspaceServiceStartProgressHandler.ServeHTTP(w, r)
		case WorkspaceServiceCompleteProgressProcedure:
			workspaceServiceCompleteProgressHandler.ServeHTTP(w, r)
		case WorkspaceServiceDeleteProgressProcedure:
			workspaceServiceDeleteProgressHandler.ServeHTTP(w, r)
		case WorkspaceServiceCreateIssueProcedure:
			workspaceServiceCreateIssueHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetIssueProcedure:
			workspaceServiceGetIssueHandler.ServeHTTP(w, r)
		case WorkspaceServiceListIssuesProcedure:
			workspaceServiceListIssuesHandler.ServeHTTP(w, r)
		case WorkspaceServiceInvestigateIssueProcedure:
			workspaceServiceInvestigateIssueHandler.ServeHTTP(w, r)
		case WorkspaceServiceResolveIssueProcedure:
			workspaceServiceResolveIssueHandler.ServeHTTP(w, r)
		case WorkspaceServiceCloseIssueProcedure:
			workspaceServiceCloseIssueHandler.ServeHTTP(w, r)
		case WorkspaceServiceDeleteIssueProcedure:
			workspaceServiceDeleteIssueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CreateTask is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetTask is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ListTasks is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DeleteTask is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) CreateTodo(context.Context, *connect.Request[v1.CreateTodoRequest]) (*connect.Response[v1.CreateTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CreateTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetTodo(context.Context, *connect.Request[v1.GetTodoRequest]) (*connect.Response[v1.GetTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListTodos(context.Context, *connect.Request[v1.ListTodosRequest]) (*connect.Response[v1.ListTodosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ListTodos is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DoTodo(context.Context, *connect.Request[v1.DoTodoRequest]) (*connect.Response[v1.DoTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DoTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UndoneTodo(context.Context, *connect.Request[v1.UndoneTodoRequest]) (*connect.Response[v1.UndoneTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.UndoneTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteTodo(context.Context, *connect.Request[v1.DeleteTodoRequest]) (*connect.Response[v1.DeleteTodoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DeleteTodo is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) CreateProgress(context.Context, *connect.Request[v1.CreateProgressRequest]) (*connect.Response[v1.CreateProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CreateProgress is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetProgress(context.Context, *connect.Request[v1.GetProgressRequest]) (*connect.Response[v1.GetProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetProgress is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListProgresses(context.Context, *connect.Request[v1.ListProgressesRequest]) (*connect.Response[v1.ListProgressesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ListProgresses is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) SetProgressSolution(context.Context, *connect.Request[v1.SetProgressSolutionRequest]) (*connect.Response[v1.SetProgressSolutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.SetProgressSolution is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) StartProgress(context.Context, *connect.Request[v1.StartProgressRequest]) (*connect.Response[v1.StartProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.StartProgress is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) CompleteProgress(context.Context, *connect.Request[v1.CompleteProgressRequest]) (*connect.Response[v1.CompleteProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CompleteProgress is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteProgress(context.Context, *connect.Request[v1.DeleteProgressRequest]) (*connect.Response[v1.DeleteProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DeleteProgress is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) CreateIssue(context.Context, *connect.Request[v1.CreateIssueRequest]) (*connect.Response[v1.CreateIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CreateIssue is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetIssue(context.Context, *connect.Request[v1.GetIssueRequest]) (*connect.Response[v1.GetIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.GetIssue is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ListIssues(context.Context, *connect.Request[v1.ListIssuesRequest]) (*connect.Response[v1.ListIssuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ListIssues is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) InvestigateIssue(context.Context, *connect.Request[v1.InvestigateIssueRequest]) (*connect.Response[v1.InvestigateIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.InvestigateIssue is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) ResolveIssue(context.Context, *connect.Request[v1.ResolveIssueRequest]) (*connect.Response[v1.ResolveIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.ResolveIssue is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) CloseIssue(context.Context, *connect.Request[v1.CloseIssueRequest]) (*connect.Response[v1.CloseIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.CloseIssue is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) DeleteIssue(context.Context, *connect.Request[v1.DeleteIssueRequest]) (*connect.Response[v1.DeleteIssueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("workspace.v1.WorkspaceService.DeleteIssue is not implemented"))
}
